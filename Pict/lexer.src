#{#}

{
open Error

type buildfun = Error.info -> Parser.token
let (symbolTable : (string,buildfun) Hashtbl.t) = Hashtbl.create 1024

let reservedWords = [
("and", fun i -> Parser.AND i);
("@", fun i -> Parser.AT i);
("Bool", fun i -> Parser.BOOL i);
("Bot", fun i -> Parser.BOT i);
("^", fun i -> Parser.CARET i); 
("ccall", fun i -> Parser.CCALL i);
("ccode", fun i -> Parser.CCODE i);
("Char", fun i -> Parser.CHAR i); 
("Con", fun i -> Parser.CON i); 
("def", fun i -> Parser.DEF i);
("else", fun i -> Parser.ELSE i);
("false", fun i -> Parser.FALSE i); 
("if", fun i -> Parser.IF i);
("import", fun i -> Parser.IMPORT i); 
("inline", fun i -> Parser.INLINE i); 
("Int", fun i -> Parser.INT i); 
("Neg", fun i -> Parser.NEG i); 
("new", fun i -> Parser.NEW i); 
("now", fun i -> Parser.NOW i);
("Pos", fun i -> Parser.POS i); 
("where", fun i -> Parser.WHERE i); 
("rec", fun i -> Parser.REC i); 
("run", fun i -> Parser.RUN i);
("String", fun i -> Parser.STRING i); 
("then", fun i -> Parser.THEN i);
("Top", fun i -> Parser.TOP i); 
("true", fun i -> Parser.TRUE i); 
("type", fun i -> Parser.TYPE i);
("Type", fun i -> Parser.KTYPE i); 
("val", fun i -> Parser.VAL i); 
("where", fun i -> Parser.WHERE i); 
("with", fun i -> Parser.WITH i); 
("\\", fun i -> Parser.BACKSLASH i);
(".", fun i -> Parser.DOT i);
(";", fun i -> Parser.SEMI i);
(":", fun i -> Parser.COLON i);
("=", fun i -> Parser.EQ i);
("!", fun i -> Parser.BANG i); 
("/", fun i -> Parser.SLASH i); 
("#", fun i -> Parser.HASH i); 
("?", fun i -> Parser.QM i);
("_", fun i -> Parser.USCORE i);
("<", fun i -> Parser.LT i);
(">", fun i -> Parser.GT i);
("|", fun i -> Parser.BAR i);
("->", fun i -> Parser.RARROW i); 
("{", fun i -> Parser.LCURLY i); 
("(", fun i -> Parser.LPAREN i); 
("[", fun i -> Parser.LSQUARE i);
("}", fun i -> Parser.RCURLY i);
(")", fun i -> Parser.RPAREN i);
("]", fun i -> Parser.RSQUARE i)
]

let _ =
  List.iter (fun (str,f) -> Hashtbl.add symbolTable str f) reservedWords

let createID i str =
  try (Hashtbl.find symbolTable str) i with _ -> Parser.ID {i=i;v=str}

(* Various counters *)

let lineno   = ref 1
and depth    = ref 0
and start    = ref 0

and filename = ref ""
and startLex = ref Error.unknown

let create inFile stream =
  if not(Filename.is_implicit inFile) then filename := inFile
  else filename := Filename.concat (Sys.getcwd()) inFile;
  lineno := 1; start := 0; Lexing.from_channel stream

let newline lexbuf = incr lineno; start := (Lexing.lexeme_start lexbuf)

let info lexbuf =
  Error.create (!filename) (!lineno) (Lexing.lexeme_start lexbuf - !start)

let text = Lexing.lexeme

let stringBuffer = ref (String.create 2048)
let stringEnd = ref 0

let resetStr () = stringEnd := 0

let addStr ch =
  let x = !stringEnd in
  let buffer = !stringBuffer
in
  if x == String.length buffer then
    begin
      let newBuffer = String.create (x*2) in
      String.blit buffer 0 newBuffer 0 x;
      String.set newBuffer x ch;
      stringBuffer := newBuffer;
      stringEnd := x+1
    end
  else
    begin
      String.set buffer x ch;
      stringEnd := x+1
    end

let getStr () = String.sub (!stringBuffer) 0 (!stringEnd)

let extractLineno yytext offset =
  int_of_string (String.sub yytext offset (String.length yytext - offset))
}

#{@}

Whitespace characters are space, newline, tab, and formfeed (control-L).
Comments are bracketed by @{-@ and @-}@ and may be nested.  A comment is
equivalent to whitespace.

Integers are sequences of digits (negative integers start with a @-@
character).  Strings can be any sequence of characters and escape
sequences enclosed in double-quotes.  The escape sequences @\"@, @\n@,
and @\\@ stand for the characters double-quote, newline, and
backslash.  The escape sequence @\ddd@ (where @d@ denotes a decimal
digit) denotes the character with code @ddd@ (codes outside the range
@0..255@ are illegal).  Character constants consist of a single quote
character (@'@), a character or escape sequence, and another single
quote.

Alphanumeric identifiers begin with a symbol from the following set:
#& a b c d e f g h i j k l m n o p q r s t u v w x y z
#& A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
Subsequent symbols may contain the following characters in
addition to those mentioned above:
#& 0 1 2 3 4 5 6 7 8 9 '
Symbolic identifiers are non-empty sequences of symbols drawn from the
following set:
#& ~ * % \ + - < > = & | @ $ , `

\section{Reserved Words}

The following symbols are reserved words:

\begin{center}\begin{tabular}{*{10}{l}}
@and@ & @Bool@ & @ccode@ & @Char@ & @def@ & @else@ & @false@ & @if@ &
@import@ & @inline@
\\
@Int@ & @new@ & @now@ & @rec@ & @run@ & @String@ & @then@ & @Top@ &
@true@ & @type@
\\
@Type@ & @val@ & @where@ & @with@ & @@@@ & @^@ & @\@ & @/@ & @.@ & @;@
\\
@:@ & @=@ & @|@ & @!@ & @#@ & @?@ & @_@ & @<@ & @>@ & @->@ 
\\
@{@ & @(@ & @[@ & @}@ & @)@ & @]@
\end{tabular}\end{center}
(The curly brackets @{@ and @}@ are not currently used, but are reserved 
for future expansion.)

#{#}

rule main = parse
  [' ' '\009' '\012']+     { main lexbuf }

| [' ' '\009' '\012']*"\n" { newline lexbuf; main lexbuf }

| "-}" { Error.errAt (info lexbuf) "Unmatched end of comment" }

| "{-" { depth := 1; startLex := info lexbuf; comment lexbuf; main lexbuf }

| "# " ['0'-'9']+
    { lineno := extractLineno (text lexbuf) 2 - 1; getFile lexbuf }

| "# line " ['0'-'9']+
    { lineno := extractLineno (text lexbuf) 7 - 1; getFile lexbuf }

| ['0'-'9']+

| '-'?['0'-'9']+
    { Parser.INTV{i=info lexbuf; v=int_of_string (text lexbuf)} }

| ['A'-'Z' 'a'-'z' '_']['A'-'Z' 'a'-'z' '_' '0'-'9' '\'']*
    { createID (info lexbuf) (text lexbuf) }

| ['~' '*' '%' '\\' '+' '-' '<' '>' '=' '&' '|' '@' '$' ',' '`']+
    { createID (info lexbuf) (text lexbuf) }

| ['#' '/' '!' '?' '^' '(' ')' '{' '}' '[' ']' ':' '.' ';' '_']
    { createID (info lexbuf) (text lexbuf) }

| "\"" { resetStr(); startLex := info lexbuf; string lexbuf }

| "'" { char lexbuf }

| eof { Parser.EOF(info lexbuf) }

| _  { Error.errAt (info lexbuf) "Illegal character" }

and comment = parse
  "{-"
    { depth := succ !depth; comment lexbuf }
| "-}"
    { depth := pred !depth; if !depth > 0 then comment lexbuf }
| eof
    { Error.errAt (!startLex) "Comment not terminated" }
| [^ '\n']
    { comment lexbuf }
| "\n"
    { newline lexbuf; comment lexbuf }

and getFile = parse
  " "* "\"" { getName lexbuf }

and getName = parse
  [^ '"' '\n']+ { filename := (text lexbuf); finishName lexbuf }

and finishName = parse
  '"' [^ '\n']* { main lexbuf }

and string = parse
  '"'  { Parser.STRINGV {i = !startLex; v=getStr()} }
| '\\' { addStr(escaped lexbuf); string lexbuf }
| '\n' { addStr '\n'; newline lexbuf; string lexbuf }
| eof  { Error.errAt (!startLex) "String not terminated" }
| _    { addStr (Lexing.lexeme_char lexbuf 0); string lexbuf }

and escaped = parse
  'n'    { '\n' }
| 't'    { '\t' }
| '\\'   { '\\' }
| '"'    { '\034'  }
| '\''   { '\'' }
| ['0'-'9']['0'-'9']['0'-'9']
    {
      let x = int_of_string(text lexbuf) in
      if x > 255 then
        Error.errAt (info lexbuf) "Illegal character constant"
      else
        Char.chr x
    }
| [^ '"' '\\' 't' 'n' '\'']
    { Error.errAt (info lexbuf) "Illegal character constant" }

and char = parse
  '\\'
    { 
      let res = Parser.CHARV{i=info lexbuf; v=escaped lexbuf}
      in quote lexbuf; res
     }
| eof { Error.errAt (info lexbuf) "Character constant not terminated" }
| _ {
      let res = Parser.CHARV{i=info lexbuf; v=Lexing.lexeme_char lexbuf 0}
      in quote lexbuf; res
    }

and quote = parse
  '\'' { () }
| _    { Error.errAt (info lexbuf) "Character constant not terminated" }
